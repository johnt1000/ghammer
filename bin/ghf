#!/usr/bin/env ruby

require "rubygems"
require "thor"
require 'terminal-table'

APP_ROOT = File.join(File.dirname(__FILE__), "..")

$LOAD_PATH.unshift File.join(APP_ROOT, 'config')
$LOAD_PATH.unshift File.join(APP_ROOT, 'lib')
$LOAD_PATH.unshift File.join(APP_ROOT, 'lib', 'ghammer')
$LOAD_PATH.unshift File.join(APP_ROOT, 'lib', 'ghammer', 'uri')
$LOAD_PATH.unshift File.join(APP_ROOT, 'bin', 'thor')

require "boot"

CONFIG = GHF::App::new

# print banner
bnr = Banner.new
puts bnr

module GHFCLI
  class GHDork < Thor
    desc "ls", I18n.t('dork.ls.description')
    def ls()
      puts I18n.t('dork.ls.loading')
      # loading
      dorks = Dorks.new
      dorks.loading
      # table
      rows = []
      dorks.result.each do |dork|
        rows << [dork.title, dork.to_s, dork.md5]
        rows << :separator
      end
      table =  Terminal::Table.new(:title => I18n.t('dork.ls.table.title'),
      :headings => [
        I18n.t('dork.ls.table.col1'),
        I18n.t('dork.ls.table.col2'),
        I18n.t('dork.ls.table.col3')
      ],
      :rows => rows)
      puts table.to_s
    end

    desc "rm <md5>", I18n.t('dork.rm.description')
    def rm(md5)
      puts "#{I18n.t('dork.rm.loading')}"
      # loading
      dorks = Dorks.new
      rs = dorks.rm(md5)
      if rs == true
        puts "\s\s#{I18n.t('dork.rm.result.positive')}\n\n"
      else
        puts "\s\s#{I18n.t('dork.rm.result.negative')}\n\n"
      end
    end

    desc "add", I18n.t('dork.add.description')
    def add
      say I18n.t('dork.add.loading')
      dork = Dork.new
      dork.title       = ask("> #{I18n.t('dork.add.question.title')} ") { |q| q.default = "title" }
      dork.description = ask("> #{I18n.t('dork.add.question.description')} ") { |q| q.default = "description" }
      dork.author      = ask("> #{I18n.t('dork.add.question.author')} ") { |q| q.default = "author" }
      
      # category
      category = nil
      choose do |menu|
        menu.header = "\n> #{I18n.t('dork.add.question.category')}"
        menu.prompt = "> #{I18n.t('dork.add.question.category_prompt')}"
        Dork::CATEGORIES.sort.each do |cat|
          menu.choice(:"#{I18n.t("dork.add.categories.#{cat.snakecase}")}") {
            category = cat
          }
        end
      end
      
      exprs = []
      say("\n#{I18n.t('dork.add.question.dork_title')}")
      loop do
        expr = {}
        choose do |menu|
          menu.choice(:"#{I18n.t('dork.add.question.dork_add')}", "#{I18n.t('dork.add.question.dork_add')}.") do |command, details|
            choose do |menu|
              menu.header = "\n> #{I18n.t('dork.add.question.dork')}"
              menu.prompt = "> #{I18n.t('dork.add.question.dork_prompt')}"
                Expr::SEARCH_OPERATORS.sort.each do |operator|
                  summary = I18n.t("dork.add.expr.operator.#{operator}.summary")
                  menu.choice(:"#{operator} (#{summary})") {
                    expr[:type] = operator
                  }
              end
            end
            
            expr[:value] = ask("\n> #{I18n.t('dork.add.question.dork_add_value')} ") { |q| q.default = "expression" }
            
            say("\n#{I18n.t('dork.add.question.dork_add_quoted')}")
            choose do |menu|
              menu.prompt = "> #{I18n.t('dork.add.question.dork_add_quoted_prompt')}"
              menu.choice(:"#{I18n.t('dork.add.question.d_yes')}") { expr[:quoted] = true }
              menu.choice(:"#{I18n.t('dork.add.question.d_no')}") { expr[:quoted] = false }
            end
            
            say("\n#{I18n.t('dork.add.question.dork_add_suppress')}")
            choose do |menu|
              menu.prompt = "> #{I18n.t('dork.add.question.dork_add_suppress_prompt')}"
              menu.choice(:"#{I18n.t('dork.add.question.d_yes')}") {
                suppress = ask("\n> #{I18n.t('dork.add.question.dork_add_suppress_info')}") { |q| q.default = "suppress" }
                expr[:suppress] = suppress.split(' ')
              }
              menu.choice(:"#{I18n.t('dork.add.question.d_no')}") { expr[:suppress] = nil }
            end
            
            say("\n#{I18n.t('dork.add.question.dork_add_synonyms')}")
            choose do |menu|
              menu.prompt = "> #{I18n.t('dork.add.question.dork_add_synonyms_prompt')}"
              menu.choice(:"#{I18n.t('dork.add.question.d_yes')}") {
                synonyms = ask("\n> #{I18n.t('dork.add.question.dork_add_synonyms_info')}") { |q| q.default = "synonyms" }
                expr[:synonyms] = synonyms.split(' ')
              }
              menu.choice(:"#{I18n.t('dork.add.question.d_no')}") { expr[:synonyms] = nil }
            end
            
            exprs.push(expr)
          end
          
          menu.choice(:"#{I18n.t('dork.add.question.dork_save')}", "#{I18n.t('dork.add.question.dork_save')}.") do |command, details|
            dork.add_exprs(exprs)
            puts dork.inspect
          end
          menu.choice(:"#{I18n.t('dork.add.question.dork_quit')}", "#{I18n.t('dork.add.question.dork_quit')}.") { exit }
        end
      end
      
      
            #
      # category = nil
#       cli = HighLine.new
#       choose do |menu|
#         # puts menu.methods.sort
#         menu.header = "> #{I18n.t('dork.add.question.category')}"
#         menu.prompt = "> #{I18n.t('dork.add.question.category_prompt')}"
#         Expr::SEARCH_OPERATORS.sort.each do |operator|
#           menu.choice(:"#{operator}", I18n.t("dork.expr.operator.#{operator}")) {
#             category = operator
#             cli.say(operator)
#           }
#           puts operator
#         end
#       end
      #
      # # category
      # category = nil
      # cli = HighLine.new
      # cli.choose do |menu|
      #   # puts menu.methods.sort
      #   menu.header = "> #{I18n.t('dork.add.question.category')}"
      #   menu.prompt = "> #{I18n.t('dork.add.question.category_prompt')}"
      #   CONFIG.dork_categories.split(', ').sort.each do |cat|
      #     menu.choice(:"#{cat.capitalize}") {
      #       category = cat.capitalize
      #       cli.say("#{cat.capitalize}")
      #     }
      #   end
      # end
      puts dork.inspect
    end
  end

  class Search < Thor
    desc "target <hostname>", "Efetua busca no <hostname>."
    option :output, type: :string, aliases: '-o', :desc => "Diretorio de saida."
    option :proxy_use, type: :boolean, aliases: '-p', :desc => "define se usa proxy"
    def target(hostname)
      gh = Ghammer.new({ target: hostname } )
      gh.proxy_use = true if options[:proxy_use]
      gh.output_directory = options[:output] if options[:output]
      # puts gh.inspect
      gh.run
    end
  end

  class Tools < Thor
    desc "my_ip", "Retorna meu IP."
    option :proxy, type: :boolean, aliases: '-p', :desc => "define se usa proxy"
    def my_ip
      puts "\nConsultando IP. Aguarde..."
      
      gh = Ghammer.new
      unless options[:proxy]
        str = "\s\sSeu IP atual é #{gh.my_ip}"
      else
        gh.proxy_use = true
        str = "\s\sSeu IP atual na rede Tor é #{gh.my_ip}"
      end
      
      puts "#{str}\n\n"
    end
  end

  class Requirements < Thor
    desc "check", "Verifica requsitos."
    def check
      puts "Verificando requsitos. Aguarde..."
      t = Tool.new
      rows = []
      if t.curl_installed?
        rows << ['Curl', 'Installed']
      else
        rows << ['Curl', 'Not Installed']
      end
      
      if t.tor_installed?
        rows << ['Tor', 'Installed']
      else
        rows << ['Tor', 'Not Installed']
      end

      puts "\n"
      puts Terminal::Table.new :title => "Dependency Table", :headings => ['Dependency', 'Status'], :rows => rows
      puts "\n"
    end
  end
  
  class GHF < Thor
    class_option :verbose, :type => :boolean, :aliases => "-v"
    
    desc "dork SUBCOMMAND", I18n.t('dork.description')
    subcommand "dork", GHDork

    desc "search SUBCOMMAND", "gerencia buscas"
    subcommand "search", Search

    desc "tools SUBCOMMAND", "ferramentas"
    subcommand "tools", Tools

    desc "requirements SUBCOMMAND", "Requisitos"
    subcommand "requirements", Requirements
  end
end

GHFCLI::GHF.start(ARGV)